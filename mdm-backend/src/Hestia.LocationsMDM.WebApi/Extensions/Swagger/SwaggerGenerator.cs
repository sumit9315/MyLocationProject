using Hestia.LocationsMDM.WebApi.Extensions.Swagger.Config;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.OpenApi.Models;
using Swashbuckle.AspNetCore.Filters;
using Swashbuckle.AspNetCore.SwaggerGen;
using System;
using System.IO;
using System.Reflection;

namespace Hestia.LocationsMDM.WebApi.Extensions.Swagger
{
    public static class SwaggerGenerator
    {
        public const string APP_TITLE = "MDM Location REST API";

        public static void ConfigureSwagger(this IApplicationBuilder app, IConfiguration configuration)
        {
            string apiVersion = GetApiVersion(configuration);

            app.UseSwagger(c =>
            {
                c.RouteTemplate = c.RouteTemplate = "swagger/swagger_{documentname}.json";
            });

            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint($"/swagger/swagger_v{apiVersion}.json", $"{APP_TITLE}");
            });
        }

        public static void AddSwaggerGeneration(this IServiceCollection services, IConfiguration configuration)
        {
            services.AddSwaggerGen(c =>
            {
                c.OperationFilter<SecurityRequirementsOperationFilter>();

                string apiVersion = GetApiVersion(configuration);

                // Configure basic details
                c.SwaggerDoc($"v{apiVersion}", new OpenApiInfo { Title = APP_TITLE, Description = "Backend REST API for the MDM Location Application", Version = $"v{apiVersion}" });

                // Configure servers
                ConfigureServers(c, configuration);

                c.EnableAnnotations();
                // c.DescribeAllEnumsAsStrings();
                // c.UseReferencedDefinitionsForEnums();

                // Configure XML documentation
                ConfigureXmlDocs(c);

                // Configure Authentication/Authorization
                ConfigureSecurity(c);

                // Configure order of Controllers and Methods
                ConfigureActionsOrder(c);
            });
        }

        private static string GetApiVersion(IConfiguration configuration)
        {
            return configuration["ApiVersion"];
        }

        private static void ConfigureServers(SwaggerGenOptions c, IConfiguration configuration)
        {
            var config = configuration.GetSection("SwaggerGen").Get<SwaggerGenConfig>();
            if (config?.Servers != null)
            {
                foreach (var serverInfo in config.Servers)
                {
                    c.AddServer(new OpenApiServer
                    {
                        Description = serverInfo.Description,
                        Url = serverInfo.Url
                    });
                }
            }
        }

        private static void ConfigureXmlDocs(SwaggerGenOptions c)
        {
            //Locate the XML file being generated by ASP.NET...
            var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
            var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

            if (File.Exists(xmlPath))
            {
                //... and tell Swagger to use those XML comments.
                c.IncludeXmlComments(xmlPath);
            }
        }

        private static void ConfigureSecurity(SwaggerGenOptions c)
        {
            var jwtScheme = new OpenApiSecurityScheme
            {
                Name = "Bearer",
                BearerFormat = "JWT",
                Scheme = "bearer",
                Description = "Authentication using JWT Token in header.",
                In = ParameterLocation.Header,
                Type = SecuritySchemeType.Http
            };
            c.AddSecurityDefinition("jwt_bearer", jwtScheme);
        }

        private static void ConfigureActionsOrder(SwaggerGenOptions c)
        {
            c.OrderActionsBy((apiDesc) =>
            {
                string prefix = "b";
                string controller = apiDesc.ActionDescriptor.RouteValues["controller"];
                if (controller == "Auth")
                {
                    prefix = "a";
                }
                else if (controller == "User")
                {
                    prefix = "x";
                }
                return $"{prefix}_{controller}_{apiDesc.HttpMethod}"; // $"{apiDesc.ActionDescriptor.RouteValues["controller"]}_{apiDesc.HttpMethod}";
            });
        }
    }
}
